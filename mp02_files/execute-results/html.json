{
  "hash": "e6d1b8dd7164cb4029d727c68ac8236a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mini-Project #02: The Business of Show Business\"\neditor: visual\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Introduction\n\nIn this project, I will put myself in the shoes of a Hollywood development executive. I will be analyzing data from the [Internet Movie Database (IMDb)](https://datasets.imdbws.com/) with the objective of proposing a new Hollywood project based on the insights provided by the data. To achieve the objective, I will first analyze historical data containing components such as genres, directors, and ratings to find trends and insights.\n\n### Data\n\nWe will start by downloading the data from the [Internet Movie Database (IMDb)](https://datasets.imdbws.com/). The following code will automatically download and load these files into `R`:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_imdb_file <- function(fname){\n    BASE_URL <- \"https://datasets.imdbws.com/\"\n    fname_ext <- paste0(fname, \".tsv.gz\")\n    if(!file.exists(fname_ext)){\n        FILE_URL <- paste0(BASE_URL, fname_ext)\n        download.file(FILE_URL, \n                      destfile = fname_ext)\n    }\n    as.data.frame(readr::read_tsv(fname_ext, lazy=FALSE))\n}\n\nNAME_BASICS      <- get_imdb_file(\"name.basics\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_BASICS     <- get_imdb_file(\"title.basics\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_EPISODES   <- get_imdb_file(\"title.episode\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_RATINGS    <- get_imdb_file(\"title.ratings\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_CREW       <- get_imdb_file(\"title.crew\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_PRINCIPALS <- get_imdb_file(\"title.principals\")\n\n#Note this was run with eval: true once, and then changed to false due to the size of the data. In following steps will will modify this table and cache it.\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Data Sub-Sampling\n\nGiven this is a large amount of data, we are going to need to start down-selecting to facilitate analysis performance. For our `NAME_BASICS` table, we'll restrict our attention to people with at least two \"known for\" credits.[^1]\n\n[^1]: It's not entirely transparent who IMDb decides what projects an actor or director is \"known for\". Still, it's a reasonable filter that leaves us with more than enough to work with for this project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNAME_BASICS <- NAME_BASICS |> \n    filter(str_count(knownForTitles, \",\") > 1)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs we can see in the following histogram, IMDb contains a long tail of not well known movies:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_RATINGS |>\n    ggplot(aes(x=numVotes)) + \n    geom_histogram(bins=30) +\n    xlab(\"Number of IMDB Ratings\") + \n    ylab(\"Number of Titles\") + \n    ggtitle(\"Majority of IMDB Titles Have Less than 100 Ratings\") + \n    theme_bw() + \n    scale_x_log10(label=scales::comma) + \n    scale_y_continuous(label=scales::comma)\n```\n\n::: {.cell-output-display}\n![](mp02_files/figure-html/title_ratings_tail-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo improve computer efficiency, any title with less than 100 ratings will be removed. As seen in the following table, this action drops around 75% of the data set:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_RATINGS |>\n    pull(numVotes) |>\n    quantile()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     0%     25%     50%     75%    100% \n      5      11      26     101 2952034 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy applying the following code, we significantly reduce the size of the data set:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_RATINGS <- TITLE_RATINGS |>\n    filter(numVotes >= 100)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe same filtering will be applied to the other `TITLE_*` tables. In the following case, the [`semi_join`](https://dplyr.tidyverse.org/reference/filter-joins.html) is used. The `semi_join` returns only values which have a match, but doesn't add columns.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_BASICS <- TITLE_BASICS |>\n    semi_join(TITLE_RATINGS, \n              join_by(tconst == tconst))\n\nTITLE_CREW <- TITLE_CREW |>\n    semi_join(TITLE_RATINGS, \n              join_by(tconst == tconst))\n\nTITLE_EPISODES_1 <- TITLE_EPISODES |>\n    semi_join(TITLE_RATINGS, \n              join_by(tconst == tconst))\nTITLE_EPISODES_2 <- TITLE_EPISODES |>\n    semi_join(TITLE_RATINGS, \n              join_by(parentTconst == tconst))\n\nTITLE_EPISODES <- bind_rows(TITLE_EPISODES_1,\n                            TITLE_EPISODES_2) |>\n    distinct()\n\nTITLE_PRINCIPALS <- TITLE_PRINCIPALS |>\n  semi_join(TITLE_RATINGS, join_by(tconst == tconst))\n\n\nrm(TITLE_EPISODES_1)\nrm(TITLE_EPISODES_2)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAt this point, the data has been filtered down *significantly*. Now, the analysis process can be started.\n\n### Initial Exploration\n\nWe will start examining our data more closely.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"NAME_BASICS TABLE\")\nglimpse(NAME_BASICS)\n\nprint(\"TITLE_BASICS TABLE\")\nglimpse(TITLE_BASICS)\n\nprint(\"TITLE_CREW TABLE\")\nglimpse(TITLE_CREW)\n\nprint(\"TITLE_EPISODES TABLE\")\nglimpse(TITLE_EPISODES)\n\nprint(\"TITLE_PRINCIPALS TABLE\")\nglimpse(TITLE_PRINCIPALS)\n\nprint(\"TITLE_RATINGS TABLE\")\nglimpse(TITLE_RATINGS)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: callout-tip\n#### Task 1: Column Type Correction (Instructor-Provided)\n\nCorrect the column types of the `TITLE` tables using a combination of `mutate` and the coercion functions `as.numeric` and `as.logical`.\n:::\n\n### Task 1: Column Type Correction\n\nThe use of the `glimpse` function above allows us to examine each table. We can see that many columns appear to be read as *character* (string) vectors, even when they should be read as *numeric*, or *numeric* when they should be read as *logical*. This could occur because missing values are represented as `\\\\N` or other non numeric values. Since `R` does not know that these are `NA` values, it retains them as strings.\n\nTo fix these, we will use the `mutate` command, and the `as.numeric` or `as.logical` command to change column type as follows:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNAME_BASICS <- NAME_BASICS |>\n    mutate(birthYear = as.numeric(birthYear),\n           deathYear = as.numeric(deathYear))\n\nprint(\"NAME_BASICS TABLE\")\nglimpse(NAME_BASICS)\n\nTITLE_BASICS <- TITLE_BASICS |>\n    mutate(startYear = as.numeric(startYear),\n           endYear = as.numeric(endYear),\n           runtimeMinutes = as.numeric(runtimeMinutes),\n           isAdult = as.logical(isAdult))\nprint(\"TITLE_BASICS TABLE\")\nglimpse(TITLE_BASICS)\n\n\nTITLE_EPISODES <- TITLE_EPISODES |>\n    mutate(seasonNumber = as.numeric(seasonNumber),\n           episodeNumber = as.numeric(episodeNumber))\n\nprint(\"TITLE_EPISODES TABLE\")\nglimpse(TITLE_EPISODES)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother aspect of this data that we would like to address is that it combines multiple pieces of information in a single cell separated by commas. We see this in the `NAME_BASICS` table, where both the `primaryProfession` and `knownForTitles` columns combine multiple values.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(NAME_BASICS)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,188,805\nColumns: 6\n$ nconst            <chr> \"nm0000001\", \"nm0000002\", \"nm0000003\", \"nm0000004\", …\n$ primaryName       <chr> \"Fred Astaire\", \"Lauren Bacall\", \"Brigitte Bardot\", …\n$ birthYear         <dbl> 1899, 1924, 1934, 1949, 1918, 1915, 1899, 1924, 1925…\n$ deathYear         <dbl> 1987, 2014, NA, 1982, 2007, 1982, 1957, 2004, 1984, …\n$ primaryProfession <chr> \"actor,miscellaneous,producer\", \"actress,soundtrack,…\n$ knownForTitles    <chr> \"tt0072308,tt0050419,tt0053137,tt0027125\", \"tt003738…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can use the `separate_longer_delim` function to break these into multiple rows: for example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNAME_BASICS |> separate_longer_delim(knownForTitles, \",\") |> slice_head(n=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      nconst     primaryName birthYear deathYear\n1  nm0000001    Fred Astaire      1899      1987\n2  nm0000001    Fred Astaire      1899      1987\n3  nm0000001    Fred Astaire      1899      1987\n4  nm0000001    Fred Astaire      1899      1987\n5  nm0000002   Lauren Bacall      1924      2014\n6  nm0000002   Lauren Bacall      1924      2014\n7  nm0000002   Lauren Bacall      1924      2014\n8  nm0000002   Lauren Bacall      1924      2014\n9  nm0000003 Brigitte Bardot      1934        NA\n10 nm0000003 Brigitte Bardot      1934        NA\n                    primaryProfession knownForTitles\n1        actor,miscellaneous,producer      tt0072308\n2        actor,miscellaneous,producer      tt0050419\n3        actor,miscellaneous,producer      tt0053137\n4        actor,miscellaneous,producer      tt0027125\n5  actress,soundtrack,archive_footage      tt0037382\n6  actress,soundtrack,archive_footage      tt0075213\n7  actress,soundtrack,archive_footage      tt0117057\n8  actress,soundtrack,archive_footage      tt0038355\n9   actress,music_department,producer      tt0057345\n10  actress,music_department,producer      tt0049189\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo preserve flexibility, we will not fully separate `NAME_BASICS` just yet, but we will need to use `separate_longer_delim` to answer various questions.\n\n## Task 2: Instructor-Provided Questions\n\n### Task 2 Question 1\n\n1.  How many movies are in our data set? How many TV series? How many TV episodes?\n\nTo answer these questions, we will be grouping our TITLE_BASICS table by title type to count how many titles of each type there are, and then we will be filtering by the specific title type we are asked to provide. Please see code and output below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_BASICS |>\n  group_by(titleType) |>\n  summarise(count = n()) |>\n  filter(titleType == \"movie\" | titleType == \"tvSeries\" | titleType == \"tvEpisode\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  titleType  count\n  <chr>      <int>\n1 movie     132220\n2 tvEpisode 156725\n3 tvSeries   29986\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the table obtained, we can see that there are many more movies and TV Episodes than TV Series.\n\n### Task 2 Question 2\n\n2.  Who is the oldest living person in our data set?\n\nGiven the data include Hollywood personalities with birth year but no death year, I will filter by those born after 1904.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_year <- year(Sys.Date())\n\noldest_living_person <- NAME_BASICS |>\n  filter(birthYear > 1904, is.na(deathYear)) |>\n  arrange(birthYear) |>\n  head(5) |>\n  mutate(age = current_year - birthYear)\n\n\noldest_living_person\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     nconst       primaryName birthYear deathYear\n1 nm0007643      Julio Abadía      1905        NA\n2 nm0033860      Michael Arco      1905        NA\n3 nm0039930 Aleksandr Astafev      1905        NA\n4 nm0056586     A. Barr-Smith      1905        NA\n5 nm0081491     Max A. Bienek      1905        NA\n                  primaryProfession                           knownForTitles\n1                             actor  tt0028204,tt0182471,tt0022157,tt0216742\n2                             actor tt0052425,tt0055206,tt0051817,tt13572070\n3 cinematographer,camera_department tt0029850,tt0038888,tt21839248,tt5897294\n4          producer,director,writer  tt0175702,tt0040279,tt0160970,tt0028488\n5  art_director,production_designer  tt0053470,tt0045046,tt0222726,tt0048635\n  age\n1 119\n2 119\n3 119\n4 119\n5 119\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBased on the results, and the data that we have, we cannot definitely determine who is the oldest person alive in our data set. In the same way there are individuals in our data born in 1625 with no death year, the output received could include deceased individuals with no death year available but who are deceased. If for grading purposes I must chose one, I would say Julio Abadía is the oldest living person in our data set. [Julio Abadía](https://www.imdb.com/name/nm0007643/?ref_=nv_sr_srsg_0_tt_0_nm_8_in_0_q_julio%2520abadia) was born in Bogota Colombia, and is known for [La Rosa de Francia](https://www.imdb.com/title/tt0028204/?ref_=nm_flmg_knf_c_1).\n\n### Task 2 Question 3\n\n3.  There is one TV Episode in this data set with a perfect 10/10 rating and at least 200,000 IMDb ratings. What is it? What series does it belong to?\n\nThe TV Episode with a perfect 10/10 rating and at least 200,000 votes is ***Ozymandias***. To find this, I fully joined three tables and filtered by the parameters provided. To find which series Ozymandias belongs to, I created a column that matches the tconst of the parent to the tconst in the TITLE_BASICS table and returns the title. Thus, we can see that Ozymandias belongs to the series ***Breaking Bad***.\n\nAt this point, we take note of the genres, which could give us some insight into which genra we could do a new production on.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_BASICS_RATINGS_EPISODES <- full_join(TITLE_BASICS, TITLE_RATINGS, join_by(tconst)) |> full_join(TITLE_EPISODES, join_by(tconst))\n\nTITLE_BASICS_RATINGS_EPISODES |> \n  filter(titleType == \"tvEpisode\", averageRating == 10, numVotes >= 200000) |>\n  mutate(parentTitle = TITLE_BASICS$originalTitle[match(parentTconst, TITLE_BASICS$tconst)]) |>\n  select(-c(tconst, isAdult, endYear, primaryTitle)) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  titleType originalTitle startYear runtimeMinutes               genres\n1 tvEpisode    Ozymandias      2013             47 Crime,Drama,Thriller\n  averageRating numVotes parentTconst seasonNumber episodeNumber  parentTitle\n1            10   229845    tt0903747            5            14 Breaking Bad\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Task 2 Question 4\n\n4.  What four projects is the actor Mark Hamill most known for?\n\nThe actor Mark Hamill is most known for the four Star Wars projects listed below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Expand the knownForTitles values into rows with a single title. I am doing this in order to match each title with its name\nNAME_BASICS <- NAME_BASICS |>\n  separate_longer_delim(col = knownForTitles, delim = \",\")\n\n\n#Now I can join the table above with another table containing the name of the titles. I am doing a left join to ensure I keep all data from the NAME_BASICS table regardless of there being a match or not\nNAME_TITLE_BASICS <- left_join(NAME_BASICS, TITLE_BASICS, join_by(knownForTitles == tconst))|>\n  rename(knownForTitle = knownForTitles)\n\n#Now, I use the newly created table to answer the question (I asked the system to give me 20 results to ensure I am not missing any titles)\nNAME_TITLE_BASICS |> \n  filter(primaryName == \"Mark Hamill\") |>\n  select(primaryName, titleType, originalTitle, knownForTitle, genres, startYear) |>\n  head(20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  primaryName titleType                                  originalTitle\n1 Mark Hamill     movie                                      Star Wars\n2 Mark Hamill     movie        Star Wars: Episode VIII - The Last Jedi\n3 Mark Hamill     movie Star Wars: Episode V - The Empire Strikes Back\n4 Mark Hamill     movie     Star Wars: Episode VI - Return of the Jedi\n  knownForTitle                   genres startYear\n1     tt0076759 Action,Adventure,Fantasy      1977\n2     tt2527336 Action,Adventure,Fantasy      2017\n3     tt0080684 Action,Adventure,Fantasy      1980\n4     tt0086190 Action,Adventure,Fantasy      1983\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is interesting to see that this actor is know for four related projects (Star Wars) and that the start year of these projects span across multiple time periods.\n\n### Task 2 Question 5\n\n5.  What TV series, with more than 12 episodes, has the highest *average* rating?\n\nThe TV series with more than 12 episodes and the highest average rating is ***20 Dakika***.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEpisodes_Basics_Ratings <- full_join(TITLE_EPISODES, TITLE_BASICS, join_by(tconst == tconst)) |>\n  full_join(TITLE_RATINGS, join_by(tconst == tconst)) |>\n  mutate(parentTitle = TITLE_BASICS$originalTitle[match(parentTconst, TITLE_BASICS$tconst)])\n\nEpisodes_Basics_Ratings |>\n  group_by(parentTconst) |>\n  summarise(\n    Average_Rating = mean(averageRating, na.rm = TRUE),\n    Total_Episodes = n(),\n    Average_Votes = mean(numVotes)\n  ) |>\n  filter(Total_Episodes > 12, Average_Votes >= 300) |>\n  arrange(desc(Average_Rating)) |>\n  mutate(parentTitle = TITLE_BASICS$originalTitle[match(parentTconst, TITLE_BASICS$tconst)]) |>\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 925 × 5\n   parentTconst Average_Rating Total_Episodes Average_Votes parentTitle         \n   <chr>                 <dbl>          <int>         <dbl> <chr>               \n 1 tt2544148              9.65             25         1115. 20 Dakika           \n 2 tt6162588              9.58             32          912. Cesur Ve Güzel      \n 3 tt6384676              9.54             20         4187. Bu Sehir Arkandan G…\n 4 tt4312318              9.35             26         4105. Seref Meselesi      \n 5 tt3052000              9.34             54         4066. Günesi Beklerken    \n 6 tt22727518             9.3              16         7449. Bambaska Biri       \n 7 tt14899624             9.27             16         1445. Zeytin Agaci        \n 8 tt13661118             9.26             14         4409. Not Me              \n 9 tt9471962              9.18             19         4619. Halka               \n10 tt27460313             9.14             40          427. Yu Gu Yao           \n# ℹ 915 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n#Styled with Style add in\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLets examine the this TV series more closely.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_BASICS_RATINGS_EPISODES |>\n  filter(parentTconst == \"tt2544148\") |>\n  select(-c(endYear,tconst, originalTitle))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   titleType          primaryTitle isAdult startYear runtimeMinutes\n1  tvEpisode            Demirbahce   FALSE      2013             NA\n2  tvEpisode             Rumelihan   FALSE      2013             NA\n3  tvEpisode        Cellat Cesmesi   FALSE      2013             NA\n4  tvEpisode            Kanli Kuyu   FALSE      2013             NA\n5  tvEpisode        Cihangir Camii   FALSE      2013             NA\n6  tvEpisode                  Vefa   FALSE      2013             NA\n7  tvEpisode                  Nika   FALSE      2013             NA\n8  tvEpisode             Kagithane   FALSE      2013             NA\n9  tvEpisode Mihrimah Sultan Camii   FALSE      2013             NA\n10 tvEpisode          Sevda Tepesi   FALSE      2013             NA\n11 tvEpisode               Tophane   FALSE      2013             NA\n12 tvEpisode            Kiz Kulesi   FALSE      2013             NA\n13 tvEpisode               Canfeda   FALSE      2013             NA\n14 tvEpisode           Kanli Cinar   FALSE      2013             NA\n15 tvEpisode         Feriye Sarayi   FALSE      2013             NA\n16 tvEpisode    Esma Sultan Yalisi   FALSE      2013             NA\n17 tvEpisode               Vanikoy   FALSE      2013             NA\n18 tvEpisode         Yildiz Sarayi   FALSE      2013             NA\n19 tvEpisode          Sahrayicedid   FALSE      2013             NA\n20 tvEpisode          Kirmizi Yali   FALSE      2013             NA\n21 tvEpisode       Agora Meyhanesi   FALSE      2013             NA\n22 tvEpisode             Eskihisar   FALSE      2013             NA\n23 tvEpisode                 Bursa   FALSE      2013             NA\n24 tvEpisode        Galata Köprüsü   FALSE      2013             NA\n25 tvEpisode              Istanbul   FALSE      2013             NA\n                 genres averageRating numVotes parentTconst seasonNumber\n1  Action,Drama,Romance           9.5     1567    tt2544148            1\n2  Action,Drama,Romance           9.6     1538    tt2544148            1\n3  Action,Drama,Romance           9.6     1273    tt2544148            1\n4  Action,Drama,Romance           9.6     1241    tt2544148            1\n5  Action,Drama,Romance           9.5     1241    tt2544148            1\n6  Action,Drama,Romance           9.4     1233    tt2544148            1\n7  Action,Drama,Romance           9.5     1304    tt2544148            1\n8  Action,Drama,Romance           9.7     1312    tt2544148            1\n9  Action,Drama,Romance           9.7     1310    tt2544148            1\n10 Action,Drama,Romance           9.7     1308    tt2544148            1\n11 Action,Drama,Romance           9.5     1045    tt2544148            1\n12 Action,Drama,Romance           9.6     1049    tt2544148            1\n13 Action,Drama,Romance           9.6     1053    tt2544148            1\n14 Action,Drama,Romance           9.6     1039    tt2544148            1\n15 Action,Drama,Romance           9.8     1063    tt2544148            1\n16 Action,Drama,Romance           9.8     1057    tt2544148            1\n17 Action,Drama,Romance           9.8     1054    tt2544148            1\n18 Action,Drama,Romance           9.6     1049    tt2544148            1\n19 Action,Drama,Romance           9.7     1049    tt2544148            1\n20 Action,Drama,Romance           9.7     1053    tt2544148            1\n21 Action,Drama,Romance           9.7     1048    tt2544148            1\n22 Action,Drama,Romance           9.7      814    tt2544148            1\n23 Action,Drama,Romance           9.7      808    tt2544148            1\n24 Action,Drama,Romance           9.8      804    tt2544148            1\n25 Action,Drama,Romance           9.8      567    tt2544148            1\n   episodeNumber\n1              1\n2              2\n3              3\n4              4\n5              5\n6              6\n7              7\n8              8\n9              9\n10            10\n11            11\n12            13\n13            14\n14            12\n15            16\n16            18\n17            19\n18            15\n19            17\n20            20\n21            21\n22            22\n23            23\n24            24\n25            25\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the above, we can see that the genres are Action, Drama, and Romance. Furthermore, the start year was 2013, which is not that old. This could indicate that contemporary audience is receptive to this kind of genre combination.\n\n### Task 2 Question 6\n\n6.  The TV series *Happy Days* (1974-1984) gives us the common idiom [\"jump the shark\"](https://en.wikipedia.org/wiki/Jumping_the_shark). The phrase comes from a controversial fifth season episode (aired in 1977) in which a lead character literally jumped over a shark on water skis. Idiomatically, it is used to refer to the moment when a once-great show becomes ridiculous and rapidly looses quality.\n\n    Is it true that episodes from later seasons of *Happy Days* have lower average ratings than the early seasons?\n\nLet us start by looking at the average ratings per season and the average number of votes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEpisodes_Basics_Ratings |>\n  filter(titleType == \"tvEpisode\", parentTitle == \"Happy Days\") |>\n  group_by(seasonNumber) |>\n  summarise(Average_Rating = mean(averageRating, na.rm = TRUE),\n            Total_Episodes = n(),\n            Average_Votes = mean(numVotes)) |>\n    ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 4\n   seasonNumber Average_Rating Total_Episodes Average_Votes\n          <dbl>          <dbl>          <int>         <dbl>\n 1            1           7.58             16          229.\n 2            2           7.69             23          187.\n 3            3           7.7              24          146.\n 4            4           7.43             25          125.\n 5            5           7                24          118.\n 6            6           7.02             16          118.\n 7            7           6.33              3          103.\n 8            8           5.3               1          108 \n 9            9           6.4               1          100 \n10           10           6.7               1          114 \n11           11           7.33              3          113 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the table, we can clearly see that the average number of votes declined as seasons passed. To better visualize the relationship between the ratings and seasons we will create a linear model\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Name data to be inputted into the linear model\nHappy_Days_Data <- Episodes_Basics_Ratings |>\n  filter(titleType == \"tvEpisode\", parentTitle == \"Happy Days\") |>\n  group_by(seasonNumber) |>\n  summarise(Average_Rating = mean(averageRating, na.rm = TRUE),\n            Total_Episodes = n(),\n            Average_Votes = mean(numVotes)) |>\n    ungroup()\n\n#Create linear model\nlinear_model <- lm(Average_Rating ~ seasonNumber, data = Happy_Days_Data)\n\n# Create graph\nif(!require(\"ggpmisc\")) install.packages(\"ggpmisc\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ggpmisc\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ggpp\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 methods overwritten by 'ggpp':\n  method                  from   \n  heightDetails.titleGrob ggplot2\n  widthDetails.titleGrob  ggplot2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'ggpp'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:ggplot2':\n\n    annotate\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggpmisc)\nggplot(Happy_Days_Data, aes(x = seasonNumber, y = Average_Rating)) +\n  geom_point() +\n  stat_poly_line(se=FALSE, color=\"black\") +\n  labs(\n    title = \"Happy Days: Average Rating by Season\",\n    x = \"Season Number\",\n    y = \"Average Rating\"\n  ) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](mp02_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the graph above, we see that episodes from later seasons of *Happy Days* have lower average ratings than the early seasons. However, as we saw initially, lower ratings come from a smaller number of rating votes. This could reflect lost interest due to lower quality of the series, or from many in the audience replacing this show for another one.\n\n## Task 3: Instructor-Provided Questions\n\nIn this section we will be creating a success metric. It will be derived solely on the data we have due to data licensing constraints.\n\n### Task 3\n\nDesign a 'success' measure for IMDb entries, reflecting both quality and broad popular awareness. Implement your success metric using a `mutate` operator to add a new column to the `TITLE_RATINGS` table.\n\nValidate your success metric as follows (see task 3 questions and responses below).\n\n### Task 3 Question 1\n\nChoose the top 5-10 movies on your metric and confirm that they were indeed box office successes.\n\n### Task 3 Question 2\n\nChoose 3-5 movies with large numbers of IMDb votes that score poorly on your success metric and confirm that they are indeed of low quality.\n\n### Task 3 Question 3\n\nChoose a prestige actor or director and confirm that they have many projects with high scores on your success metric.\n\n### Task 3 Question 4\n\nPerform at least one other form of 'spot check' validation.\n\n### Task 3 Question 5\n\nCome up with a numerical threshold for a project to be a 'success'; that is, determine a value $v$ such that movies above $v$ are all \"solid\" or better.\n\nYou will use your success metric and threshold to complete the rest of this Mini-Project. You may, if you wish, restrict your attention to movies for the remainder of your analysis, though a good development executive should also consider making TV series.\n\n### Examining Success by Genre and Decade\n\nNow that you have a working proxy for success, it's time to look at trends in success over time. Answer the following questions. Your responses should include at least 2 graphics.\n\n::: callout-tip\n#### Task 4: Trends in Success Over Time\n\nUsing questions like the following, identify a good \"genre\" for your next film. You do not need to answer these questions precisely, but these are may help guide your thinking.\n\n1.  What was the genre with the most \"successes\" in each decade?\n2.  What genre consistently has the most \"successes\"? What genre used to reliably produced \"successes\" and has fallen out of favor?\n3.  What genre has produced the most \"successes\" since 2010? Does it have the highest success *rate* or does it only have a large number of successes because there are many productions in that genre?\n4.  What genre has become more popular in recent years?\n:::\n\nBased on your findings, select a genre for your next project. Note that you may wish to avoid an \"oversatured\" genre; you just need to make the argument that your proposal is a *good* investment, not necessarily the most *studio-produced focus-grouped committee-designed generic satisfying* choice, so feel free to lean in to your own artistic preferences, as long as you can make an argument for them.\n\n### Successful Personnel in the Genre\n\nNow that you have selected a target genre, identify two actors and one director who will anchor your project. You want to identify key personnel who have worked in the genre before, with at least modest success, and who have at least one major success to their credit.\n\nAs you develop your team, you may want to consider the following possibilities:\n\n-   An older established actor and an up-and-coming actor\n-   An actor/director pair who have been successful together\n-   An actor/director pair who are both highly successful but have never worked together\n-   A pair of established actors who have had success in many genres\n\nAs you select your key personnel, consider what IMDb says they are known for; this will be useful in developing your marketing materials.\n\n::: callout-tip\n#### Task 5: Key Personnel\n\nIdentify (at least) two actors and one director who you will target as the key talent for your movie. Write a short \"pitch\" as to why they are likely to be successful. You should support your pitch with at least one graphic and one table.\n:::\n\n### Nostalgia and Remakes\n\nNow that you have found a target genre and key talent for your project, you need a story. Like any good development executive, your first instinct should be to produce a remake of a classic film in the genre.\n\n::: callout-tip\n#### Task 6: Finding a Classic Movie to Remake\n\nFind a classic movie to remake with your key talent. The original should have a large number of IMDb ratings, a high average rating, and not have been remade in the past 25 years.[^2]\n\nOnce you have found your classic movie to remake, confirm whether key actors, directors, or writers from the original are still alive. If so, you need to contact your legal department to ensure they can secure the rights to the project. You may also want to include the classic actors as \"fan service.\"\n:::\n\n[^2]: In order to see that a movie has not been recently remade, it is sufficient to confirm that no movie has been made with the same name in the past 25 years.\n\n## Putting It Together\n\n::: callout-tip\n#### Task 7: Write and Deliver Your Pitch\n\nNow that you have completed your analysis, write an \"elevator pitch\" of approximately 200-250 words for your proposed Hollywood project. This is the pitch you will bring to the studio head (your boss); if the studio head likes your pitch, you will be given a small sum of money to start securing the story rights and locking down tentative deals with key talent.\n\nYour pitch needs to synthesize the analysis above into two to three quick and compelling points. (*E.g.*, \"The market for animated young adult horror musicals has grown 200% in the past decade\" or \"Over 90% of Director D's movies are successes.\") You need to present the strongest argument for each element of your pitch, including genre, director, actors, and story.\n\nIf your boss approves the pitch, you will need to have a brief trailer ready for the next quarterly earnings call. The marketing department has asked that you prepare a classic 90's style teaser for them. Adapt the following cliched formula for your pitch.\n\n> From director D, the visionary mind between N1; and From actor A, beloved star of N2; and From actor A2, Hollywood icon of genre G, Comes the timeless tail N3 A story of TOPIC, TOPIC, and TOPIC Coming soon to a theater near you.\n\nIf you're creatively-minded, you could have some fun here using Generative tools to draft a script or mock up a movie poster for your pitch.\n:::\n\n## General Remarks\n\nAs you approach this project, recall there are no right or wrong answers. You are exploring data looking for *exciting* and *actionable* findings. You have several key decisions to make and you can support them with data, but the decisions are ultimately yours. This project is an exercise both in the \"nuts-and-bolts\" of analyzing a large data set and in using data to inform and refine what is ultimately still a \"gut feeling\" qualitative business decision.\n\n------------------------------------------------------------------------\n\nCredits to [Michael Weylandt](https://michael-weylandt.com) who provided a great part of the code for the data gathering and cleaning process.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}